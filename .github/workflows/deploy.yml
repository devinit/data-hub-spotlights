name: Deploy

on:
  push:
    tags:
      - v*
    branches:
      - 'develop'

jobs:
  build:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v3
      - name: clear old build files
        run: |
          rm -rf build.zip build
          npm ci

      - name: Building
        run: |
          npm run build

      - name: Bundling
        run: |
          mkdir build && mv .next build/ && mv public build/ && mv dist/* build/ && mv package.json build/ && mv package-lock.json build/ && mv Dockerfile build/ && mv docker-compose.yml build/ && mv pages/ build/ && mv nginx/ build/
          zip -q -r build.zip build

      - name: Upload build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: ./build.zip

      - name: Upload deploy script as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: deploy
          path: ./deploy_script.sh

      - name: Return to original state
        run: |
          git reset .
          git checkout .
          rm -rf build
          echo "DONE!"

  deploy:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: deploy
          path: ./deploy_script.sh

      - name: download build artifact
        uses: actions/download-artifact@v1
        with:
          name: build
          path: ./build.zip

      - name: Set env for develop branch or staging
        if: contains(steps.get_version.outputs.VERSION, '-beta') || github.ref == 'refs/heads/develop'
        run: |
          echo "::set-env name=HOST::${{ secrets.DEV_HOST }}"
          echo "::set-env name=CMS_URL::${{ secrets.DEV_CMS_URL }}"

      - name: Set env for master branch
        if: contains(steps.get_version.outputs.VERSION, '-beta') != true || github.ref != 'refs/heads/develop'
        run: |
          echo "::set-env name=HOST::${{ secrets.PROD_HOST }}"
          echo "::set-env name=CMS_URL::${{ secrets.PROD_CMS_URL }}"

      - name: copy deploy_file via ssh
        uses: appleboy/scp-action@master
        env:
          HOST: ${{ env.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          PORT: ${{ secrets.PORT }}
          KEY: ${{ secrets.KEY }}
        with:
          source: './deploy_script.sh,./build.zip'
          target: 'deploy_spotlights'
      - name: executing remote ssh commands using ssh
        uses: appleboy/ssh-action@master
        env:
          CMS_URL: ${{ env.CMS_URL }}
          BITLY_API_KEY: ${{ secrets.BITLY_API_KEY }}
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          envs: CMS_URL,BITLY_API_KEY
          script: |
            export CMS_URL=$CMS_URL
            export BITLY_API_KEY=$BITLY_API_KEY
            cd ./deploy_spotlights/deploy_script.sh && chmod +x deploy_script.sh && bash deploy_script.sh
